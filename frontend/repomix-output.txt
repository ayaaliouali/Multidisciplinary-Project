This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.gitignore
eslint.config.js
index.html
package.json
public/vite.svg
README.md
src/App.jsx
src/components/AboutContent/AboutContent.jsx
src/components/Cart/AddToCartButton.jsx
src/components/Cart/CartItem.jsx
src/components/Cart/CartSummary.jsx
src/components/Dashboard/DashboardHeader.jsx
src/components/Dashboard/DashboardStats.jsx
src/components/Footer/Footer.jsx
src/components/Hero/Hero.jsx
src/components/Navbar/modals/LoginModal.jsx
src/components/Navbar/modals/SignUpModal.jsx
src/components/Navbar/Navbar.jsx
src/components/Products/CreateProduct.jsx
src/components/Products/ProductCard.jsx
src/components/Products/ProductDetailModal.jsx
src/components/Products/ProductForm.jsx
src/components/Products/Products.jsx
src/components/Products/UpdateProduct.jsx
src/components/ShopProducts/ShopProducts.jsx
src/components/TopProducts/TopProducts.jsx
src/context/CartContext.jsx
src/index.css
src/main.jsx
src/pages/AboutUs.jsx
src/pages/Cart.jsx
src/pages/Dashboard.jsx
src/pages/Home.jsx
src/pages/Layout.jsx
src/pages/Shop.jsx
vite.config.js

================================================================
Files
================================================================

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

================
File: eslint.config.js
================
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...reactHooks.configs.recommended.rules,
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]

================
File: index.html
================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>

================
File: public/vite.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

================
File: README.md
================
# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend using TypeScript with type-aware lint rules enabled. Check out the [TS template](https://github.com/vitejs/vite/tree/main/packages/create-vite/template-react-ts) for information on how to integrate TypeScript and [`typescript-eslint`](https://typescript-eslint.io) in your project.

================
File: src/components/AboutContent/AboutContent.jsx
================
import React from 'react';

const AboutContent = () => {
  return (
    <div className="pt-16 min-h-screen" style={{ backgroundColor: '#F5F0ED' }}>
      {/* Hero Section */}
      <div className="relative">
        
       
        
        {/* Content Container */}
        <div className="relative z-10 container mx-auto px-4 py-16">
          <div className="flex flex-col lg:flex-row items-center gap-12">
            
            {/* Left Side - Image */}
            <div className="</div>lg:w-1/2">
              <div className="relative">
                <img 
                  src="src\assets\item\flower.jpg"  
                  alt="Beautiful pink rose" 
                  className="w-full h-auto rounded-lg shadow-2xl"
                />
                <div className="absolute inset-0 bg-gradient-to-r from-pink-200/20 to-transparent rounded-lg"></div>
              </div>
            </div>

            {/* Right Side - Content */}
            <div className="lg:w-1/2 space-y-8">
              
              {/* Title */}
              <div className="text-center lg:text-left">
                <h1 
                  className="text-5xl lg:text-6xl font-bold mb-6"
                  style={{ 
                    fontFamily: 'Crimson Text, serif',
                    color: '#2D1B17'
                  }}
                >
                  About Us
                </h1>
              </div>

              {/* Main Content Box */}
              <div 
                className="bg-white/90 backdrop-blur-sm rounded-xl p-8 shadow-xl border-2"
                style={{ borderColor: '#C05263' }}
              >
                <div className="space-y-6">
                  <p 
                    className="text-lg leading-relaxed"
                    style={{ 
                      fontFamily: 'Crimson Text, serif',
                      color: '#2D1B17'
                    }}
                  >
                    At <span className="font-bold" style={{ color: '#C05263' }}>Flower Touch</span>, we believe that gifting is more than just a gesture - it's a language of love, appreciation, and beauty.
                  </p>

                  <p 
                    className="text-lg leading-relaxed"
                    style={{ 
                      fontFamily: 'Crimson Text, serif',
                      color: '#2D1B17'
                    }}
                  >
                    Born from a passion for delicate details and meaningful moments, our brand was created to make giving feel soft, intentional, and unforgettable.
                  </p>

                  <p 
                    className="text-lg leading-relaxed"
                    style={{ 
                      fontFamily: 'Crimson Text, serif',
                      color: '#2D1B17'
                    }}
                  >
                    We carefully curate elegant gift boxes, floral-inspired pieces, and custom packaging — each crafted with care and wrapped with love. Because every item tells a story, every petal speaks a feeling, and every touch leaves a memory.
                  </p>

                  <p 
                    className="text-lg leading-relaxed"
                    style={{ 
                      fontFamily: 'Crimson Text, serif',
                      color: '#2D1B17'
                    }}
                  >
                    Whether you're celebrating someone special or simply spreading joy, <span className="font-bold" style={{ color: '#C05263' }}>Flower Touche</span> is here to help you say it with heart — 
                    <br />
                    <span className="italic">One gift at a time.</span>
                  </p>
                </div>
              </div>

              {/* Decorative Elements */}
              <div className="flex justify-center lg:justify-start space-x-4 mt-8">
                <div className="w-12 h-12 rounded-full bg-pink-200 flex items-center justify-center">
                  <span className="text-2xl">🌸</span>
                </div>
                <div className="w-12 h-12 rounded-full bg-rose-200 flex items-center justify-center">
                  <span className="text-2xl">💝</span>
                </div>
                <div className="w-12 h-12 rounded-full bg-pink-100 flex items-center justify-center">
                  <span className="text-2xl">💕</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Mission Section */}
      <div className="py-16 bg-white/50">
        <div className="container mx-auto px-4">
          <div className="max-w-4xl mx-auto text-center">
            <h2 
              className="text-4xl font-bold mb-8"
              style={{ 
                fontFamily: 'Crimson Text, serif',
                color: '#C05263'
              }}
            >
              Our Mission
            </h2>
            <p 
              className="text-xl leading-relaxed text-gray-700"
              style={{ fontFamily: 'Crimson Text, serif' }}
            >
              To transform ordinary moments into extraordinary memories through thoughtfully crafted gifts that speak the language of the heart. We believe in the power of touch, the beauty of intention, and the magic that happens when love is wrapped in petals.
            </p>
          </div>
        </div>
      </div>

      {/* Values Section */}
      <div className="py-16">
        <div className="container mx-auto px-4">
          <h2 
            className="text-4xl font-bold text-center mb-12"
            style={{ 
              fontFamily: 'Crimson Text, serif',
              color: '#C05263'
            }}
          >
            What We Stand For
          </h2>
          
          <div className="grid md:grid-cols-3 gap-8 max-w-6xl mx-auto">
            <div className="text-center p-6">
              <div className="w-16 h-16 rounded-full bg-pink-200 mx-auto mb-4 flex items-center justify-center">
                <span className="text-3xl">🎨</span>
              </div>
              <h3 
                className="text-2xl font-bold mb-3"
                style={{ 
                  fontFamily: 'Crimson Text, serif',
                  color: '#2D1B17'
                }}
              >
                Artistry
              </h3>
              <p 
                className="text-gray-700"
                style={{ fontFamily: 'Crimson Text, serif' }}
              >
                Every piece is thoughtfully designed and carefully crafted to create something truly special.
              </p>
            </div>

            <div className="text-center p-6">
              <div className="w-16 h-16 rounded-full bg-rose-200 mx-auto mb-4 flex items-center justify-center">
                <span className="text-3xl">💖</span>
              </div>
              <h3 
                className="text-2xl font-bold mb-3"
                style={{ 
                  fontFamily: 'Crimson Text, serif',
                  color: '#2D1B17'
                }}
              >
                Love
              </h3>
              <p 
                className="text-gray-700"
                style={{ fontFamily: 'Crimson Text, serif' }}
              >
                We pour our hearts into every creation, ensuring each gift carries genuine emotion and care.
              </p>
            </div>

            <div className="text-center p-6">
              <div className="w-16 h-16 rounded-full bg-pink-100 mx-auto mb-4 flex items-center justify-center">
                <span className="text-3xl">✨</span>
              </div>
              <h3 
                className="text-2xl font-bold mb-3"
                style={{ 
                  fontFamily: 'Crimson Text, serif',
                  color: '#2D1B17'
                }}
              >
                Magic
              </h3>
              <p 
                className="text-gray-700"
                style={{ fontFamily: 'Crimson Text, serif' }}
              >
                We believe in creating moments that feel magical and memories that last forever.
              </p>
            </div>
          </div>
        </div>
      </div>

      <style jsx>{`
        @import url('https://fonts.googleapis.com/css2?family=Crimson+Text:wght@400;600;700&display=swap');
      `}</style>
    </div>
  );
};

export default AboutContent;

================
File: src/components/Cart/AddToCartButton.jsx
================
import React, { useState } from 'react';
import { useCart } from '../../context/CartContext';

const AddToCartButton = ({ product, variant = 'primary', size = 'medium', className = '' }) => {
  const { addItem } = useCart();
  const [isAdded, setIsAdded] = useState(false);

  const handleAddToCart = (e) => {
    e.preventDefault();
    e.stopPropagation();
    
    addItem(product);
    setIsAdded(true);
    
    // Reset the button state after 2 seconds
    setTimeout(() => {
      setIsAdded(false);
    }, 2000);
  };

  // Define button styles based on variant and size
  const getButtonStyles = () => {
    const baseStyles = "font-semibold rounded transition-all duration-300 flex items-center justify-center gap-2";
    
    // Size styles
    const sizeStyles = {
      small: "px-3 py-1 text-xs",
      medium: "px-4 py-2 text-sm",
      large: "px-6 py-3 text-base"
    };

    // Variant styles
    const variantStyles = {
      primary: isAdded 
        ? "bg-green-500 text-white" 
        : "bg-pink-500 text-white hover:bg-pink-600",
      secondary: isAdded 
        ? "bg-green-100 text-green-800 border border-green-300" 
        : "bg-pink-100 text-pink-900 border border-pink-300 hover:bg-pink-200",
      outline: isAdded 
        ? "bg-green-50 text-green-700 border-2 border-green-500" 
        : "bg-transparent text-pink-500 border-2 border-pink-500 hover:bg-pink-50"
    };

    return `${baseStyles} ${sizeStyles[size]} ${variantStyles[variant]} ${className}`;
  };

  return (
    <button
      onClick={handleAddToCart}
      className={getButtonStyles()}
      disabled={isAdded}
      style={{
        backgroundColor: !isAdded && variant === 'primary' ? '#C05263' : undefined,
        color: !isAdded && variant === 'primary' ? '#fff' : undefined
      }}
      onMouseEnter={e => {
        if (!isAdded && variant === 'primary') {
          e.currentTarget.style.backgroundColor = '#EDAF9E';
        }
      }}
      onMouseLeave={e => {
        if (!isAdded && variant === 'primary') {
          e.currentTarget.style.backgroundColor = '#C05263';
        }
      }}
    >
      {isAdded ? (
        <>
          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
          </svg>
          Added!
        </>
      ) : (
        <>
          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 13m0 0l-2.5 2.5M7 13l2.5 2.5" />
          </svg>
          Add to Cart
        </>
      )}
    </button>
  );
};

export default AddToCartButton;

================
File: src/components/Cart/CartItem.jsx
================
import React from 'react';
import { useCart } from '../../context/CartContext';

const CartItem = ({ item }) => {
  const { updateQuantity, removeItem } = useCart();

  const handleQuantityChange = (newQuantity) => {
    if (newQuantity <= 0) {
      removeItem(item.id);
    } else {
      updateQuantity(item.id, newQuantity);
    }
  };

  return (
    <div className="flex items-center gap-4 p-4 border-b border-gray-200 last:border-b-0">
      {/* Product Image */}
      <div className="flex-shrink-0">
        <img
          src={item.img}
          alt={item.title}
          className="w-20 h-20 object-cover rounded-md"
        />
      </div>

      {/* Product Details */}
      <div className="flex-grow">
        <h3 className="font-semibold text-pink-950">{item.title}</h3>
        <p className="text-sm text-gray-600">{item.color}</p>
        <div className="flex items-center gap-1 mt-1">
          <span className="text-yellow-500">★</span>
          <span className="text-sm text-gray-500">{item.rating}</span>
        </div>
      </div>

      {/* Quantity Controls */}
      <div className="flex items-center gap-3">
        <button
          onClick={() => handleQuantityChange(item.quantity - 1)}
          className="w-8 h-8 rounded-full bg-gray-200 flex items-center justify-center hover:bg-gray-300 transition-colors"
        >
          -
        </button>
        <span className="w-8 text-center font-semibold">{item.quantity}</span>
        <button
          onClick={() => handleQuantityChange(item.quantity + 1)}
          className="w-8 h-8 rounded-full bg-gray-200 flex items-center justify-center hover:bg-gray-300 transition-colors"
        >
          +
        </button>
      </div>

      {/* Price */}
      <div className="text-right">
        <p className="font-semibold text-pink-950">{(item.price * item.quantity).toLocaleString()}da</p>
        <p className="text-sm text-gray-500">{item.price}da each</p>
      </div>

      {/* Remove Button */}
      <button
        onClick={() => removeItem(item.id)}
        className="text-red-500 hover:text-red-700 transition-colors p-2"
        title="Remove item"
      >
        <svg
          className="w-5 h-5"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth={2}
            d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"
          />
        </svg>
      </button>
    </div>
  );
};

export default CartItem;

================
File: src/components/Cart/CartSummary.jsx
================
import React from 'react';
import { useCart } from '../../context/CartContext';

const CartSummary = () => {
  const { items, getCartTotal, clearCart } = useCart();

  const subtotal = getCartTotal();
  const shipping = 500; // Fixed shipping cost
  const total = subtotal + shipping;

  const handleCheckout = () => {
    alert('Proceeding to checkout...');
    // Here you would integrate with your payment system
  };

  return (
    <div className="bg-white rounded-lg shadow-md p-6">
      <h2 className="text-xl font-semibold text-pink-950 mb-6">Order Summary</h2>
      
      {/* Order Details */}
      <div className="space-y-3 mb-6">
        <div className="flex justify-between">
          <span className="text-gray-600">Subtotal ({items.length} items)</span>
          <span className="font-semibold">{subtotal.toLocaleString()}da</span>
        </div>
        <div className="flex justify-between">
          <span className="text-gray-600">Shipping</span>
          <span className="font-semibold">{shipping.toLocaleString()}da</span>
        </div>
        <div className="border-t pt-3">
          <div className="flex justify-between text-lg font-bold text-pink-950">
            <span>Total</span>
            <span>{total.toLocaleString()}da</span>
          </div>
        </div>
      </div>

      
        <div className="space-y-3">
          <button
            onClick={handleCheckout}
            className="w-full text-white py-3 px-4 rounded-lg transition-colors font-semibold"
            style={{
              backgroundColor: '#C05263',
            }}
            onMouseOver={e => (e.currentTarget.style.backgroundColor = '#EDAF9E')}
            onMouseOut={e => (e.currentTarget.style.backgroundColor = '#C05263')}
          >
            Proceed to Checkout
          </button>
          
          <button
            onClick={clearCart}
            className="w-full bg-gray-200 text-gray-800 py-2 px-4 rounded-lg hover:bg-gray-300 transition-colors"
          >
            Clear Cart
          </button>
          
          <a
            href="/shop"
            className="block w-full text-center py-2 px-4 rounded-lg hover:bg-pink-50 transition-colors"
            style={{
          border: '1px solid #C05263',
          color: '#000',
            }}
          >
            Continue Shopping
          </a>
        </div>

        {/* Promo Code Section */}
      <div className="mt-6 pt-6 border-t">
        <h3 className="font-semibold text-gray-800 mb-3">Promo Code</h3>
        <div className="flex gap-2">
          <input
            type="text"
            placeholder="Enter promo code"
            className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:border-pink-500"
          />
          <button
            className="px-4 py-2 text-white rounded-lg transition-colors"
            style={{
              backgroundColor: '#C05263',
            }}
            onMouseOver={e => (e.currentTarget.style.backgroundColor = '#EDAF9E')}
            onMouseOut={e => (e.currentTarget.style.backgroundColor = '#C05263')}
          >
            Apply
          </button>
        </div>
      </div>
    </div>
  );
};

export default CartSummary;

================
File: src/components/Dashboard/DashboardHeader.jsx
================
import React from 'react';
import { User, Bell, Settings } from 'lucide-react';

const DashboardHeader = ({ adminName = "Admin" }) => {
  const currentTime = new Date().toLocaleTimeString('en-US', {
    hour: '2-digit',
    minute: '2-digit'
  });
  
  const currentDate = new Date().toLocaleDateString('en-US', {
    weekday: 'long',
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });

  return (
    <header className="bg-white shadow-sm border-b sticky top-16 z-40">
      <div className="max-w-7xl mx-auto px-4 py-4">
        <div className="flex justify-between items-center">
          <div>
            <h1 className="text-2xl font-bold text-gray-800">Product Dashboard</h1>
            <p className="text-sm text-gray-600">{currentDate}</p>
          </div>
          
          <div className="flex items-center gap-4">
            <div className="text-sm text-gray-600 hidden md:block">
              {currentTime}
            </div>
            
            
            
            <div className="flex items-center gap-3 px-3 py-2 bg-gray-50 rounded-lg">
              <div className="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center">
                <User size={16} className="text-white" />
              </div>
              <span className="text-sm font-medium text-gray-700 hidden sm:block">
                {adminName}
              </span>
            </div>
          </div>
        </div>
      </div>
    </header>
  );
};

export default DashboardHeader;

================
File: src/components/Dashboard/DashboardStats.jsx
================
import React from 'react';
import { Package, DollarSign, AlertTriangle, Star, TrendingUp } from 'lucide-react';

const DashboardStats = ({ products }) => {
  const totalProducts = products.length;
  const totalStock = products.reduce((sum, p) => sum + p.stock, 0);
  const totalValue = products.reduce((sum, p) => sum + (p.price * p.stock), 0);
  const lowStockItems = products.filter(p => p.stock <= 5).length;
  const outOfStockItems = products.filter(p => p.stock === 0).length;
  const featuredItems = products.filter(p => p.featured).length;

  const stats = [
    {
      title: 'Total Products',
      value: totalProducts,
      icon: Package,
      color: 'text-blue-600',
      bg: 'bg-blue-100',
    },
    {
      title: 'Total Stock',
      value: totalStock.toLocaleString(),
      icon: TrendingUp,
      color: 'text-green-600',
      bg: 'bg-green-100',
    },
    {
      title: 'Inventory Value',
      value: `$${totalValue.toFixed(2)}`,
      icon: DollarSign,
      color: 'text-purple-600',
      bg: 'bg-purple-100',
    },
    {
      title: 'Low Stock Alert',
      value: lowStockItems,
      icon: AlertTriangle,
      color: 'text-yellow-600',
      bg: 'bg-yellow-100',
    },
    {
      title: 'Out of Stock',
      value: outOfStockItems,
      icon: AlertTriangle,
      color: 'text-red-600',
      bg: 'bg-red-100',
    },
    {
      title: 'Featured Items',
      value: featuredItems,
      icon: Star,
      color: 'text-yellow-600',
      bg: 'bg-yellow-100',
    }
  ];

  return (
    <div className="mb-6">
      <h2 className="text-xl font-semibold mb-4 text-gray-800">Dashboard Overview</h2>
      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4">
        {stats.map((stat, index) => {
          const Icon = stat.icon;
          return (
            <div key={index} className="bg-white p-4 rounded-lg shadow-sm hover:shadow-md transition-shadow border">
              <div className="flex items-center justify-between mb-3">
                <div className={`p-2 rounded-lg ${stat.bg}`}>
                  <Icon size={20} className={stat.color} />
                </div>
              </div>
              
              <div>
                <h3 className="text-xl font-bold text-gray-800 mb-1">
                  {stat.value}
                </h3>
                <p className="text-xs text-gray-600 font-medium">
                  {stat.title}
                </p>
              </div>
            </div>
          );
        })}
      </div>
    </div>
  );
};

export default DashboardStats;

================
File: src/components/Navbar/modals/LoginModal.jsx
================
import { useState } from 'react';

const LoginModal = ({ open, onClose }) => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');

  if (!open) return null;

  return (
    <div
      style={{
        position: 'fixed', top: 0, left: 0, right: 0, bottom: 0,
        backgroundColor: 'rgba(0,0,0,0.5)', display: 'flex',
        alignItems: 'center', justifyContent: 'center', zIndex: 2000
      }}
      onClick={onClose}
    >
      <div
        style={{
          backgroundColor: '#EDAF9E', padding: '2rem',
          borderRadius: '8px', width: '400px', maxWidth: '90%'
        }}
        onClick={e => e.stopPropagation()}
      >
        <h2 style={{ color: '#C05263' }}>Login</h2>
        <form onSubmit={(e) => {
          e.preventDefault();
          console.log('Login attempted:', { email, password });
          onClose();
        }}>
          <div style={{ marginBottom: '1rem' }}>
            <label htmlFor="email">Email:</label>
            <input
              id="email"
              type="email"
              value={email}
              onChange={e => setEmail(e.target.value)}
              required
              style={{
                width: '100%',
                padding: '0.5rem',
                marginTop: '0.5rem',
                border: '2px solid #C05263',
                borderRadius: '4px'
              }}
            />
          </div>
          <div style={{ marginBottom: '1rem' }}>
            <label htmlFor="password">Password:</label>
            <input
              id="password"
              type="password"
              value={password}
              onChange={e => setPassword(e.target.value)}
              required
              style={{
                width: '100%',
                padding: '0.5rem',
                marginTop: '0.5rem',
                border: '2px solid #C05263',
                borderRadius: '4px'
              }}
            />
          </div>
          <button
            type="submit"
            style={{
              width: '100%',
              padding: '0.75rem',
              backgroundColor: 'white',
              color: '#C05263',
              border: 'none',
              borderRadius: '4px',
              fontWeight: 'bold',
              fontSize: '1rem'
            }}
          >
            <span style={{ color: '#C05263' }}>Login</span>
          </button>
        </form>
      </div>
    </div>
  );
};

export default LoginModal;

================
File: src/components/Navbar/modals/SignUpModal.jsx
================
import { useState } from 'react';

const SignUpModal = ({ open, onClose }) => {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    password: '',
    confirmPassword: ''
  });


  if (!open) return null;
  
  return (
    <div
      style={{
        position: 'fixed', top: 0, left: 0, right: 0, bottom: 0,
        backgroundColor: 'rgba(0,0,0,0.5)', display: 'flex',
        alignItems: 'center', justifyContent: 'center', zIndex: 2000
      }}
      onClick={onClose}
    >
      <div
        style={{
          backgroundColor: '#C05263', // dark background
          padding: '2rem',
          borderRadius: '12px',
          width: '400px',
          maxWidth: '90%',
          boxShadow: '0 4px 24px rgba(34,34,59,0.2)'
        }}
        onClick={e => e.stopPropagation()}
      >
        <h2 style={{ color: '#f2e9e4', marginBottom: '1.5rem' }}>Sign Up</h2>
        <form onSubmit={(e) => {
          e.preventDefault();
          console.log('Signup attempted:', formData);
          onClose();
        }}>
          <div style={{ marginBottom: '1rem' }}>
            <label style={{ color: '#f2e9e4', fontWeight: 500 }}>
              Name:
              <input
                type="text"
                value={formData.name}
                onChange={e => setFormData({ ...formData, name: e.target.value })}
                required
                style={{
                  width: '100%',
                  padding: '0.5rem',
                  marginTop: '0.25rem',
                  borderRadius: '6px',
                  border: '1px solid #c9ada7',
                  background: '#EDAF9E',
                  color: '#f2e9e4'
                }}
              />
            </label>
          </div>
          <div style={{ marginBottom: '1rem' }}>
            <label style={{ color: '#f2e9e4', fontWeight: 500 }}>
              Email:
              <input
                type="email"
                value={formData.email}
                onChange={e => setFormData({ ...formData, email: e.target.value })}
                required
                style={{
                  width: '100%',
                  padding: '0.5rem',
                  marginTop: '0.25rem',
                  borderRadius: '6px',
                  border: '1px solid #c9ada7',
                  background: '#EDAF9E',
                  color: '#f2e9e4'
                }}
              />
            </label>
          </div>
          <div style={{ marginBottom: '1rem' }}>
            <label style={{ color: '#f2e9e4', fontWeight: 500 }}>
              Password:
              <input
                type="password"
                value={formData.password}
                onChange={e => setFormData({ ...formData, password: e.target.value })}
                required
                style={{
                  width: '100%',
                  padding: '0.5rem',
                  marginTop: '0.25rem',
                  borderRadius: '6px',
                  border: '1px solid #c9ada7',
                  background: '#EDAF9E',
                  color: '#f2e9e4'
                }}
              />
            </label>
          </div>
          <div style={{ marginBottom: '1rem' }}>
            <label style={{ color: '#f2e9e4', fontWeight: 500 }}>
              Confirm Password:
              <input
                type="password"
                value={formData.confirmPassword}
                onChange={e => setFormData({ ...formData, confirmPassword: e.target.value })}
                required
                style={{
                  width: '100%',
                  padding: '0.5rem',
                  marginTop: '0.25rem',
                  borderRadius: '6px',
                  border: '1px solid #c9ada7',
                  background: '#EDAF9E',
                  color: '#f2e9e4'
                }}
              />
            </label>
          </div>
          <div style={{ display: 'flex', justifyContent: 'flex-end' }}>
            <button
              type="button"
              onClick={onClose}
              style={{
                marginRight: '1rem',
                background: '#f2e9e4',
                color: '#C06263',
                border: 'none',
                borderRadius: '6px',
                padding: '0.5rem 1.2rem',
                fontWeight: 600,
                cursor: 'pointer'
              }}
            >
              Cancel
            </button>
            <button
              type="submit"
              style={{
                background: '#f2e9e4',
                color: '#C06263',
                border: 'none',
                borderRadius: '6px',
                padding: '0.5rem 1.2rem',
                fontWeight: 600,
                cursor: 'pointer'
              }}
            >
              Sign Up
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default SignUpModal;

================
File: src/components/Products/CreateProduct.jsx
================
import React, { useState } from 'react';

const CreateProduct = () => {
  const [formData, setFormData] = useState({
    name: '',
    price: '',
    description: '',
    image: null
  });

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleImageChange = (e) => {
    const file = e.target.files[0];
    setFormData(prev => ({
      ...prev,
      image: file
    }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    console.log('Creating product:', formData);
    // Add your product creation logic here
  };

  return (
    <div className="p-8 border-b border-gray-200">
      <h2 className="text-2xl font-bold text-rose-600 mb-6">
        Create Product
      </h2>
      
      <form onSubmit={handleSubmit} className="grid gap-4 max-w-lg">
        <div className="flex flex-col gap-2">
          <label className="text-sm font-medium text-gray-700">
            Product Name
          </label>
          <input
            type="text"
            name="name"
            value={formData.name}
            onChange={handleInputChange}
            className="px-3 py-2 border border-gray-300 rounded-lg text-base outline-none focus:border-rose-300 focus:ring-2 focus:ring-rose-100 transition-all"
            placeholder="Enter product name"
            required
          />
        </div>

        <div className="flex flex-col gap-2">
          <label className="text-sm font-medium text-gray-700">
            Price (DA)
          </label>
          <input
            type="number"
            name="price"
            value={formData.price}
            onChange={handleInputChange}
            className="px-3 py-2 border border-gray-300 rounded-lg text-base outline-none focus:border-rose-300 focus:ring-2 focus:ring-rose-100 transition-all"
            placeholder="Enter price"
            required
          />
        </div>

        <div className="flex flex-col gap-2">
          <label className="text-sm font-medium text-gray-700">
            Description
          </label>
          <textarea
            name="description"
            value={formData.description}
            onChange={handleInputChange}
            className="px-3 py-2 border border-gray-300 rounded-lg text-base min-h-24 resize-y font-sans outline-none focus:border-rose-300 focus:ring-2 focus:ring-rose-100 transition-all"
            placeholder="Enter product description"
          />
        </div>

        <div className="flex flex-col gap-2">
          <label className="text-sm font-medium text-gray-700">
            Product Image
          </label>
          <input
            type="file"
            accept="image/*"
            onChange={handleImageChange}
            className="px-2 py-2 border border-gray-300 rounded-lg bg-gray-50 file:mr-4 file:py-1 file:px-3 file:rounded file:border-0 file:text-sm file:bg-rose-100 file:text-rose-700 hover:file:bg-rose-200"
          />
          {formData.image && (
            <img
              src={URL.createObjectURL(formData.image)}
              alt="Preview"
              className="w-24 h-24 object-cover rounded-lg border border-gray-300 mt-2"
            />
          )}
        </div>

        <button
          type="submit"
          className="bg-rose-300 hover:bg-rose-400 text-black px-6 py-3 rounded-lg text-base font-medium cursor-pointer transition-colors mt-4"
        >
          Add Product
        </button>
      </form>
    </div>
  );
};

export default CreateProduct;

================
File: src/components/Products/ProductCard.jsx
================
// ProductCard.js
import React from 'react';
import { Edit2, Trash2, Star, Package } from 'lucide-react';

const ProductCard = ({ product, onEdit, onDelete }) => {
  const handleDelete = () => {
    if (window.confirm(`Are you sure you want to delete "${product.name}"?`)) {
      onDelete(product.id);
    }
  };

  const getStockStatus = (stock) => {
    if (stock === 0) return { text: 'Out of Stock', color: 'text-red-600 bg-red-100' };
    if (stock <= 5) return { text: 'Low Stock', color: 'text-yellow-600 bg-yellow-100' };
    return { text: 'In Stock', color: 'text-green-600 bg-green-100' };
  };

  const stockStatus = getStockStatus(product.stock);
  const createdDate = product.createdAt ? new Date(product.createdAt).toLocaleDateString() : 'N/A';

  return (
    <div className="bg-white rounded-lg shadow-md overflow-hidden transition-transform hover:scale-105 hover:shadow-lg">
      {/* Product Image */}
      <div className="relative aspect-square bg-gray-100 overflow-hidden">
        {product.image ? (
          <img 
            src={product.image} 
            alt={product.name}
            className="w-full h-full object-cover"
          />
        ) : (
          <div className="w-full h-full flex items-center justify-center text-gray-400">
            <Package size={48} />
          </div>
        )}
        
        {/* Featured Badge */}
        {product.featured && (
          <div className="absolute top-2 left-2 bg-yellow-500 text-white px-2 py-1 rounded-full text-xs flex items-center gap-1">
            <Star size={12} fill="currentColor" />
            Featured
          </div>
        )}
        
        {/* Stock Status Badge */}
        <div className={`absolute top-2 right-2 px-2 py-1 rounded-full text-xs font-medium ${stockStatus.color}`}>
          {stockStatus.text}
        </div>
      </div>
      
      {/* Product Info */}
      <div className="p-4">
        <div className="mb-3">
          <h3 className="font-semibold text-lg text-gray-800 mb-1 line-clamp-2">
            {product.name}
          </h3>
          <p className="text-2xl font-bold text-green-600 mb-2">
            ${product.price.toFixed(2)}
          </p>
        </div>
        
        {/* Product Details */}
        <div className="space-y-2 mb-4">
          <div className="flex justify-between text-sm">
            <span className="text-gray-600">Category:</span>
            <span className="font-medium text-gray-800">{product.category}</span>
          </div>
          
          <div className="flex justify-between text-sm">
            <span className="text-gray-600">Stock:</span>
            <span className="font-medium text-gray-800">{product.stock} units</span>
          </div>
          
          {product.sku && (
            <div className="flex justify-between text-sm">
              <span className="text-gray-600">SKU:</span>
              <span className="font-medium text-gray-800 text-xs">{product.sku}</span>
            </div>
          )}
          
          <div className="flex justify-between text-sm">
            <span className="text-gray-600">Added:</span>
            <span className="font-medium text-gray-800 text-xs">{createdDate}</span>
          </div>
        </div>
        
        {/* Description */}
        {product.description && (
          <p className="text-sm text-gray-600 mb-4 line-clamp-3">
            {product.description}
          </p>
        )}
        
        {/* Action Buttons */}
        <div className="flex gap-2">
          <button
            onClick={() => onEdit(product)}
            className="flex-1 bg-blue-600 text-white p-2.5 rounded-lg hover:bg-blue-700 transition-colors flex items-center justify-center gap-2 font-medium"
          >
            <Edit2 size={16} />
            Edit
          </button>
          <button
            onClick={handleDelete}
            className="flex-1 bg-red-600 text-white p-2.5 rounded-lg hover:bg-red-700 transition-colors flex items-center justify-center gap-2 font-medium"
          >
            <Trash2 size={16} />
            Delete
          </button>
        </div>
      </div>
    </div>
  );
};

export default ProductCard;

================
File: src/components/Products/ProductDetailModal.jsx
================
import React from 'react';
import { X } from 'lucide-react';

const ProductDetailModal = ({ product, isOpen, onClose }) => {
  if (!isOpen || !product) return null;

  return (
    <div className="fixed inset-0  bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-pink-200 p-6 rounded-lg w-full max-w-md mt-20">
        <div className="flex justify-between items-center mb-4">
          <h3 className="text-xl font-semibold">Product Details</h3>
          <button onClick={onClose} className="text-gray-400 hover:text-gray-600">
            <X size={24} />
          </button>
        </div>
        
        <div className="space-y-3">
          <div><strong>Name:</strong> {product.name}</div>
          <div><strong>Price:</strong> ${product.price}</div>
          <div><strong>Category:</strong> {product.category}</div>
          <div><strong>Stock:</strong> {product.stock}</div>
          <div><strong>SKU:</strong> {product.sku}</div>
          <div><strong>Featured:</strong> {product.featured ? 'Yes' : 'No'}</div>
          {product.description && (
            <div><strong>Description:</strong> {product.description}</div>
          )}
        </div>
      </div>
    </div>
  );
};

export default ProductDetailModal;

================
File: src/components/Products/ProductForm.jsx
================
import React, { useState, useEffect } from 'react';
import { Save, X } from 'lucide-react';

const ProductForm = ({ product, onSave, onCancel, isEditing }) => {
  const [formData, setFormData] = useState({
    name: '',
    price: '',
    category: '',
    description: '',
    image: '',
    stock: '',
    sku: '',
    featured: false
  });

  const [errors, setErrors] = useState({});

  useEffect(() => {
    if (product) {
      setFormData({
        name: product.name || '',
        price: product.price || '',
        category: product.category || '',
        description: product.description || '',
        image: product.image || '',
        stock: product.stock || '',
        sku: product.sku || '',
        featured: product.featured || false
      });
    }
  }, [product]);

  const validateForm = () => {
    const newErrors = {};
    
    if (!formData.name.trim()) newErrors.name = 'Product name is required';
    if (!formData.price || parseFloat(formData.price) <= 0) newErrors.price = 'Valid price is required';
    if (!formData.category) newErrors.category = 'Category is required';
    if (!formData.stock || parseInt(formData.stock) < 0) newErrors.stock = 'Valid stock quantity is required';
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = () => {
    if (!validateForm()) return;

    const productData = {
      ...formData,
      id: product?.id || Date.now(),
      price: parseFloat(formData.price) || 0,
      stock: parseInt(formData.stock) || 0,
      sku: formData.sku || `SKU-${Date.now()}`,
      createdAt: product?.createdAt || new Date().toISOString(),
      updatedAt: new Date().toISOString()
    };
    onSave(productData);
  };

  const categories = [
    'Gift Sets',
    'Flowers',
    'Accessories',
    'Graduation',
    'Wedding',
    'Birthday',
    'Anniversary',
    'Corporate Gifts'
  ];

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white p-6 rounded-lg w-full max-w-md max-h-[90vh] overflow-y-auto">
        <h3 className="text-xl font-semibold mb-6">
          {isEditing ? 'Edit Product' : 'Add New Product'}
        </h3>
        
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium mb-1">Product Name *</label>
            <input
              type="text"
              value={formData.name}
              onChange={(e) => setFormData({ ...formData, name: e.target.value })}
              className={`w-full p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                errors.name ? 'border-red-500' : 'border-gray-300'
              }`}
              placeholder="Enter product name"
            />
            {errors.name && <p className="text-red-500 text-xs mt-1">{errors.name}</p>}
          </div>
          
          <div>
            <label className="block text-sm font-medium mb-1">Price ($) *</label>
            <input
              type="number"
              step="0.01"
              min="0"
              value={formData.price}
              onChange={(e) => setFormData({ ...formData, price: e.target.value })}
              className={`w-full p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                errors.price ? 'border-red-500' : 'border-gray-300'
              }`}
              placeholder="0.00"
            />
            {errors.price && <p className="text-red-500 text-xs mt-1">{errors.price}</p>}
          </div>
          
          <div>
            <label className="block text-sm font-medium mb-1">Category *</label>
            <select
              value={formData.category}
              onChange={(e) => setFormData({ ...formData, category: e.target.value })}
              className={`w-full p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                errors.category ? 'border-red-500' : 'border-gray-300'
              }`}
            >
              <option value="">Select Category</option>
              {categories.map(cat => (
                <option key={cat} value={cat}>{cat}</option>
              ))}
            </select>
            {errors.category && <p className="text-red-500 text-xs mt-1">{errors.category}</p>}
          </div>
          
          <div>
            <label className="block text-sm font-medium mb-1">Stock Quantity *</label>
            <input
              type="number"
              min="0"
              value={formData.stock}
              onChange={(e) => setFormData({ ...formData, stock: e.target.value })}
              className={`w-full p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                errors.stock ? 'border-red-500' : 'border-gray-300'
              }`}
              placeholder="0"
            />
            {errors.stock && <p className="text-red-500 text-xs mt-1">{errors.stock}</p>}
          </div>

          <div>
            <label className="block text-sm font-medium mb-1">SKU</label>
            <input
              type="text"
              value={formData.sku}
              onChange={(e) => setFormData({ ...formData, sku: e.target.value })}
              className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="Auto-generated if empty"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium mb-1">Description</label>
            <textarea
              value={formData.description}
              onChange={(e) => setFormData({ ...formData, description: e.target.value })}
              className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              rows="3"
              placeholder="Product description..."
            />
          </div>
          
          <div>
            <label className="flex items-center">
              <input
                type="checkbox"
                checked={formData.featured}
                onChange={(e) => setFormData({ ...formData, featured: e.target.checked })}
                className="mr-2"
              />
              <span className="text-sm font-medium">Featured Product</span>
            </label>
          </div>
          
          <div className="flex gap-3 pt-6">
            <button
              onClick={handleSubmit}
              className="flex-1 bg-blue-600 text-white p-3 rounded-lg hover:bg-blue-700 transition-colors flex items-center justify-center gap-2 font-medium"
            >
              <Save size={18} />
              {isEditing ? 'Update Product' : 'Add Product'}
            </button>
            <button
              onClick={onCancel}
              className="flex-1 bg-gray-500 text-white p-3 rounded-lg hover:bg-gray-600 transition-colors flex items-center justify-center gap-2 font-medium"
            >
              <X size={18} />
              Cancel
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ProductForm;

================
File: src/components/Products/UpdateProduct.jsx
================
import React, { useState } from 'react';
import ProductCard from '../Products/ProductCard';
import ProductDetailModal from '../Products/ProductDetailModal';

const UpdateProduct = () => {
  // Sample products data with correct structure for ProductCard
  const [products, setProducts] = useState([
    {
      id: 1,
      title: 'Mirror with pink bows', // Changed from 'name' to 'title'
      price: 2500,
      img: '/api/placeholder/150/220', // Changed from 'image' to 'img'
      rating: 4.5,
      color: "Pink"
    },
    {
      id: 2,
      title: 'Mirror with red hearts',
      price: 2500,
      img: '/api/placeholder/150/220',
      rating: 4.5,
      color: "Red"
    },
    {
      id: 3,
      title: 'Large pink cup',
      price: 5000,
      img: '/api/placeholder/150/220',
      rating: 4.7,
      color: "Pink"
    },
    {
      id: 4,
      title: 'Large white cup',
      price: 5000,
      img: '/api/placeholder/150/220',
      rating: 4.4,
      color: "White"
    },
    {
      id: 5,
      title: 'Engagement frame',
      price: 3500,
      img: '/api/placeholder/150/220',
      rating: 4.5,
      color: "Pink"
    }
  ]);

  const [selectedProduct, setSelectedProduct] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editingProduct, setEditingProduct] = useState(null);
  const [editForm, setEditForm] = useState({
    title: '',
    price: '',
    color: ''
  });

  const handleViewProduct = (product) => {
    setSelectedProduct(product);
    setIsModalOpen(true);
  };

  const handleCloseModal = () => {
    setIsModalOpen(false);
    setSelectedProduct(null);
  };

  const handleEditProduct = (product) => {
    setEditingProduct(product.id);
    setEditForm({
      title: product.title,
      price: product.price.toString(),
      color: product.color
    });
  };

  const handleSaveEdit = () => {
    setProducts(prev => prev.map(product => 
      product.id === editingProduct 
        ? { 
            ...product, 
            title: editForm.title,
            price: parseInt(editForm.price),
            color: editForm.color
          }
        : product
    ));
    setEditingProduct(null);
    setEditForm({ title: '', price: '', color: '' });
  };

  const handleCancelEdit = () => {
    setEditingProduct(null);
    setEditForm({ title: '', price: '', color: '' });
  };

  const handleDeleteProduct = (productId) => {
    if (window.confirm('Are you sure you want to delete this product?')) {
      setProducts(prev => prev.filter(product => product.id !== productId));
    }
  };

  const handleFormChange = (e) => {
    const { name, value } = e.target;
    setEditForm(prev => ({
      ...prev,
      [name]: value
    }));
  };

  return (
    <>
      <div className="p-8">
        <h2 className="text-2xl font-bold text-rose-600 mb-6">
          Update Products
        </h2>
        
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 mb-8">
          {products.map(product => (
            <div key={product.id} className="relative">
              {editingProduct === product.id ? (
                // Edit Form
                <div className="bg-white p-4 rounded-lg border-2 border-rose-300">
                  <div className="space-y-3">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Product Name
                      </label>
                      <input
                        type="text"
                        name="title"
                        value={editForm.title}
                        onChange={handleFormChange}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:ring-2 focus:ring-rose-500 focus:border-rose-500"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Price (DA)
                      </label>
                      <input
                        type="number"
                        name="price"
                        value={editForm.price}
                        onChange={handleFormChange}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:ring-2 focus:ring-rose-500 focus:border-rose-500"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Color
                      </label>
                      <input
                        type="text"
                        name="color"
                        value={editForm.color}
                        onChange={handleFormChange}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:ring-2 focus:ring-rose-500 focus:border-rose-500"
                      />
                    </div>
                    <div className="flex gap-2 pt-2">
                      <button
                        onClick={handleSaveEdit}
                        className="flex-1 bg-green-500 hover:bg-green-600 text-white px-3 py-2 rounded-md text-sm font-medium transition-colors"
                      >
                        Save
                      </button>
                      <button
                        onClick={handleCancelEdit}
                        className="flex-1 bg-gray-500 hover:bg-gray-600 text-white px-3 py-2 rounded-md text-sm font-medium transition-colors"
                      >
                        Cancel
                      </button>
                    </div>
                  </div>
                </div>
              ) : (
                // Product Card with Action Buttons
                <div className="relative">
                  <ProductCard
                    product={product}
                    onViewProduct={handleViewProduct}
                  />
                  
                  {/* Action Buttons Overlay */}
                  <div className="absolute top-2 right-2 flex flex-col gap-1 opacity-0 group-hover:opacity-100 transition-opacity">
                    <button
                      onClick={() => handleEditProduct(product)}
                      className="bg-blue-500 hover:bg-blue-600 text-white p-1.5 rounded-md text-xs font-medium transition-colors shadow-md"
                      title="Edit Product"
                    >
                      ✏️
                    </button>
                    <button
                      onClick={() => handleDeleteProduct(product.id)}
                      className="bg-red-500 hover:bg-red-600 text-white p-1.5 rounded-md text-xs font-medium transition-colors shadow-md"
                      title="Delete Product"
                    >
                      🗑️
                    </button>
                  </div>
                </div>
              )}
            </div>
          ))}
        </div>
        
        {products.length === 0 && (
          <div className="text-center text-gray-500 py-8">
            No products available
          </div>
        )}
        
        <button
          className="w-full bg-red-500 hover:bg-red-600 text-white px-6 py-3 rounded-lg text-base font-medium cursor-pointer transition-colors"
          onClick={() => {
            if (window.confirm('Are you sure you want to delete all products?')) {
              setProducts([]);
            }
          }}
        >
          Delete All Products
        </button>
      </div>

      {/* Product Detail Modal */}
      <ProductDetailModal
        product={selectedProduct}
        isOpen={isModalOpen}
        onClose={handleCloseModal}
      />
    </>
  );
};

export default UpdateProduct;

================
File: src/components/TopProducts/TopProducts.jsx
================
import React from "react";

import IMG3 from "../../assets/item/img3.jpg";
import IMG4 from "../../assets/item/cup.jpg";
import IMG5 from "../../assets/item/cup1.jpg";


const ProductsData = [
    
    {
        id: 9,
        img: IMG3,
        title: "Blue Hearts Box",
        price: 4500,
        rating: 4.7,
        
    },
    {
        id: 12,
        img: IMG5,
        title: "Success Frame",
        price: 2000,
        rating: 4.2,
        
    },
    {
        id: 10,
        img: IMG4,
        title: "Red Hearts Box",
        price: 4500,
        rating: 4.5,
        
    },
   
];


const TopProducts = () => {
    // Animation: Fade in on mount using React and Tailwind CSS
    const [mounted, setMounted] = React.useState(false);
    const [visibleItems, setVisibleItems] = React.useState(
        Array(ProductsData.length).fill(false)
    );
    const itemRefs = React.useRef([]);

    React.useEffect(() => {
        setMounted(true);
        // Animate each item in sequence
        ProductsData.forEach((_, i) => {
            setTimeout(() => {
                setVisibleItems(prev => {
                    const updated = [...prev];
                    updated[i] = true;
                    return updated;
                });
            }, i * 150);
        });
    }, []);

    return (
        <div>
            <div className="max-w-6xl mx-auto px-4">
            {/* header section */}
            <div className="flex flex-col items-center justify-center min-h-[20vh] text-center mb-2 mx-auto">
                <p className="text-sm text-pink-950 mb-1">Top Rated Products for you</p>
                <h1 className="text-3xl font-bold mb-1">Best Products</h1>
                <p className="text-xs text-pink-900">
                    Here you will find the best items 
                    that you will not find anywhere else.
                </p>
            </div>
            {/* body section */}
                <div
                    className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6 md:gap-4 place-items-center">
                        
                    {
                    ProductsData.map((data, i) => (
                        <div
                        key={data.id}
                        ref={el => (itemRefs.current[i] = el)}
                        className={`rounded-3xl bg-white dark:bg-gray-800 duration-300 group max-w-[300px] cursor-pointer transition-shadow focus-within:ring-4 focus-within:ring-[#C05263] hover:shadow-lg
                            ${visibleItems[i] ? "opacity-100 translate-y-0" : "opacity-0 translate-y-8"}
                        `}
                        style={{
                            transition: "opacity 0.6s cubic-bezier(.4,0,.2,1), transform 0.6s cubic-bezier(.4,0,.2,1)",
                            transitionDelay: `${i * 150}ms`
                        }}
                        tabIndex={0}
                        >
                        {/*image section*/}
                        <div className="overflow-hidden rounded-xl flex flex-col items-center">
                            <img
                            src={data.img}
                            alt={data.title}
                            className="rounded-xl 
                             group-focus:scale-105
                             block mx-auto
                             max-w-[140px] group-hover:scale-105 transition-transform
                             duration-300 drop-shadow-md"
                            />
                        </div>
                        {/*details section*/}
                        <div className="p-4 pt-2 text-center">
                            <h2 className="text-lg font-semibold">{data.title}</h2>
                            <p className="text-pink-900">Price: {data.price} DZD</p>
                            <span className='text-yellow-500 mr-1'>★</span>
                            <span className='text-gray-500'>{data.rating}</span>
                        </div>
                        <div className="pb-4 flex justify-center">
                            <button
                                className="text-white font-semibold py-2 px-6 rounded-full shadow transition-colors duration-200 focus:outline-none focus:ring-2"
                                style={{
                                    backgroundColor: "#C05263"
                                }}
                                onMouseOver={e => e.currentTarget.style.backgroundColor = "#EDAF9E"}
                                onMouseOut={e => e.currentTarget.style.backgroundColor = "#C05263"}
                                onFocus={e => e.currentTarget.style.backgroundColor = "#EDAF9E"}
                                onBlur={e => e.currentTarget.style.backgroundColor = "#C05263"}
                                onClick={() => alert(`Order placed for: ${data.title}`)}
                            >
                                Order Now
                            </button>
                        </div>
                        </div>
                    ))
                    }
                </div>
            </div>
        </div>
    );
};
export default TopProducts;

================
File: src/context/CartContext.jsx
================
import React, { createContext, useContext, useReducer } from 'react';

// Cart Context
const CartContext = createContext();

// Cart Actions
const CART_ACTIONS = {
  ADD_ITEM: 'ADD_ITEM',
  REMOVE_ITEM: 'REMOVE_ITEM',
  UPDATE_QUANTITY: 'UPDATE_QUANTITY',
  CLEAR_CART: 'CLEAR_CART'
};

// Cart Reducer
const cartReducer = (state, action) => {
  switch (action.type) {
    case CART_ACTIONS.ADD_ITEM:
      const existingItem = state.items.find(item => item.id === action.payload.id);
      
      if (existingItem) {
        return {
          ...state,
          items: state.items.map(item =>
            item.id === action.payload.id
              ? { ...item, quantity: item.quantity + 1 }
              : item
          )
        };
      } else {
        return {
          ...state,
          items: [...state.items, { ...action.payload, quantity: 1 }]
        };
      }

    case CART_ACTIONS.REMOVE_ITEM:
      return {
        ...state,
        items: state.items.filter(item => item.id !== action.payload)
      };

    case CART_ACTIONS.UPDATE_QUANTITY:
      return {
        ...state,
        items: state.items.map(item =>
          item.id === action.payload.id
            ? { ...item, quantity: Math.max(0, action.payload.quantity) }
            : item
        ).filter(item => item.quantity > 0)
      };

    case CART_ACTIONS.CLEAR_CART:
      return {
        ...state,
        items: []
      };

    default:
      return state;
  }
};

// Initial State
const initialState = {
  items: []
};

// Cart Provider Component
export const CartProvider = ({ children }) => {
  const [state, dispatch] = useReducer(cartReducer, initialState);

  const addItem = (product) => {
    dispatch({ type: CART_ACTIONS.ADD_ITEM, payload: product });
  };

  const removeItem = (productId) => {
    dispatch({ type: CART_ACTIONS.REMOVE_ITEM, payload: productId });
  };

  const updateQuantity = (productId, quantity) => {
    dispatch({ type: CART_ACTIONS.UPDATE_QUANTITY, payload: { id: productId, quantity } });
  };

  const clearCart = () => {
    dispatch({ type: CART_ACTIONS.CLEAR_CART });
  };

  const getCartTotal = () => {
    return state.items.reduce((total, item) => total + (item.price * item.quantity), 0);
  };

  const getCartItemsCount = () => {
    return state.items.reduce((total, item) => total + item.quantity, 0);
  };

  const value = {
    items: state.items,
    addItem,
    removeItem,
    updateQuantity,
    clearCart,
    getCartTotal,
    getCartItemsCount
  };

  return (
    <CartContext.Provider value={value}>
      {children}
    </CartContext.Provider>
  );
};

// Custom Hook to use Cart Context
export const useCart = () => {
  const context = useContext(CartContext);
  if (!context) {
    throw new Error('useCart must be used within a CartProvider');
  }
  return context;
};

================
File: src/index.css
================
@import "tailwindcss";

================
File: src/pages/AboutUs.jsx
================
import React from 'react';
import Navbar from '../components/Navbar/Navbar';
import Footer from '../components/Footer/Footer';
import AboutContent from '../components/AboutContent/AboutContent';

const AboutUs = () => {
  return (
    <div className="min-h-screen flex flex-col">
      
      <main className="flex-grow">
        <AboutContent />
      </main>
      
    </div>
  );
};

export default AboutUs;

================
File: src/pages/Cart.jsx
================
import React from 'react';
import { useCart } from '../context/CartContext';
import CartItem from '../components/Cart/CartItem';
import CartSummary from '../components/Cart/CartSummary';

const Cart = () => {
  const { items, getCartTotal } = useCart();

  if (items.length === 0) {
    return (
      <div className="min-h-screen bg-gray-50 pt-20">
        <div className="container mx-auto px-4 py-8">
          <div className="text-center">
            <h1 className="text-3xl font-bold text-pink-950 mb-8">Shopping Cart</h1>
            <div className="bg-white rounded-lg shadow-md p-8">
              <div className="text-gray-500 text-lg mb-4">Your cart is empty</div>
              <p className="text-gray-400 mb-6">Add some products to get started!</p>
              <a 
                href="/shop"
                className="inline-block px-6 py-3 rounded-lg transition-colors"
                style={{
                  backgroundColor: '#C05263',
                  color: '#fff'
                }}
                onMouseOver={e => e.currentTarget.style.backgroundColor = '#EDAF9E'}
                onMouseOut={e => e.currentTarget.style.backgroundColor = '#C05263'}
              >
                Continue Shopping
              </a>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 pt-20">
      <div className="container mx-auto px-4 py-8">
        <h1 className="text-3xl font-bold text-pink-950 mb-8">Shopping Cart</h1>
        
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Cart Items */}
          <div className="lg:col-span-2">
            <div className="bg-white rounded-lg shadow-md p-6">
              <h2 className="text-xl font-semibold text-pink-950 mb-6">Cart Items ({items.length})</h2>
              <div className="space-y-4">
                {items.map((item) => (
                  <CartItem key={item.id} item={item} />
                ))}
              </div>
            </div>
          </div>

          {/* Cart Summary */}
          <div className="lg:col-span-1">
            <CartSummary />
          </div>
        </div>
      </div>
    </div>
  );
};

export default Cart;

================
File: src/pages/Dashboard.jsx
================
import React, { useState } from 'react';
import { Plus, Edit, Trash2, Eye } from 'lucide-react';
import DashboardHeader from '../components/Dashboard/DashboardHeader';
import DashboardStats from '../components/Dashboard/DashboardStats';
import ProductForm from '../components/Products/ProductForm';
import ProductDetailModal from '../components/Products/ProductDetailModal';

const AdminDashboard = () => {
  const [products, setProducts] = useState([
    {
      id: 1,
      name: 'Mirror with pink bows',
      price: 25.00,
      category: 'Accessories',
      description: 'Beautiful mirror decorated with pink bows',
      stock: 10,
      sku: 'SKU-001',
      featured: true,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    },
    {
      id: 2,
      name: 'Large pink cup',
      price: 50.00,
      category: 'Gift Sets',
      description: 'Large decorative pink cup',
      stock: 0,
      sku: 'SKU-002',
      featured: false,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    },
    {
      id: 3,
      name: 'Engagement frame',
      price: 35.00,
      category: 'Wedding',
      description: 'Special engagement photo frame',
      stock: 3,
      sku: 'SKU-003',
      featured: true,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    }
  ]);

  const [showForm, setShowForm] = useState(false);
  const [editingProduct, setEditingProduct] = useState(null);
  const [selectedProduct, setSelectedProduct] = useState(null);
  const [showDetailModal, setShowDetailModal] = useState(false);

  const handleAddProduct = () => {
    setEditingProduct(null);
    setShowForm(true);
  };

  const handleEditProduct = (product) => {
    setEditingProduct(product);
    setShowForm(true);
  };

  const handleSaveProduct = (productData) => {
    if (editingProduct) {
      // Update existing product
      setProducts(prev => prev.map(p => p.id === editingProduct.id ? productData : p));
    } else {
      // Add new product
      setProducts(prev => [...prev, productData]);
    }
    setShowForm(false);
    setEditingProduct(null);
  };

  const handleDeleteProduct = (productId) => {
    if (window.confirm('Are you sure you want to delete this product?')) {
      setProducts(prev => prev.filter(p => p.id !== productId));
    }
  };

  const handleViewProduct = (product) => {
    setSelectedProduct(product);
    setShowDetailModal(true);
  };

  const handleCancelForm = () => {
    setShowForm(false);
    setEditingProduct(null);
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <DashboardHeader />
      
      <div className="max-w-7xl mx-auto p-6">
        <DashboardStats products={products} />
        
        {/* Add Product Button */}
        <div className="mb-6">
          <button
            onClick={handleAddProduct}
            className="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors flex items-center gap-2 font-medium"
          >
            <Plus size={20} />
            Add New Product
          </button>
        </div>

        {/* Products Grid */}
        <div className="bg-white rounded-lg shadow-sm p-6">
          <h2 className="text-xl font-semibold mb-4">Products Management</h2>
          
          {products.length === 0 ? (
            <div className="text-center text-gray-500 py-8">
              No products available. Add your first product!
            </div>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {products.map(product => (
                <div key={product.id} className="border rounded-lg p-4 hover:shadow-md transition-shadow">
                  <div className="mb-3">
                    <h3 className="font-semibold text-lg">{product.name}</h3>
                    <p className="text-gray-600">${product.price}</p>
                    <p className="text-sm text-gray-500">{product.category}</p>
                    <p className="text-sm">
                      Stock: <span className={product.stock <= 5 ? 'text-red-600 font-medium' : 'text-green-600'}>{product.stock}</span>
                    </p>
                    {product.featured && (
                      <span className="inline-block bg-yellow-100 text-yellow-800 text-xs px-2 py-1 rounded-full mt-1">
                        Featured
                      </span>
                    )}
                  </div>
                  
                  <div className="flex gap-2">
                    <button
                      onClick={() => handleViewProduct(product)}
                      className="flex-1 bg-gray-100 text-gray-700 px-3 py-2 rounded-md hover:bg-gray-200 transition-colors flex items-center justify-center gap-1 text-sm"
                    >
                      <Eye size={16} />
                      View
                    </button>
                    <button
                      onClick={() => handleEditProduct(product)}
                      className="flex-1 bg-blue-100 text-blue-700 px-3 py-2 rounded-md hover:bg-blue-200 transition-colors flex items-center justify-center gap-1 text-sm"
                    >
                      <Edit size={16} />
                      Edit
                    </button>
                    <button
                      onClick={() => handleDeleteProduct(product.id)}
                      className="flex-1 bg-red-100 text-red-700 px-3 py-2 rounded-md hover:bg-red-200 transition-colors flex items-center justify-center gap-1 text-sm"
                    >
                      <Trash2 size={16} />
                      Delete
                    </button>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>

      {/* Modals */}
      {showForm && (
        <ProductForm
          product={editingProduct}
          onSave={handleSaveProduct}
          onCancel={handleCancelForm}
          isEditing={!!editingProduct}
        />
      )}

      <ProductDetailModal
        product={selectedProduct}
        isOpen={showDetailModal}
        onClose={() => setShowDetailModal(false)}
      />
    </div>
  );
};

export default AdminDashboard;

================
File: src/pages/Home.jsx
================
import React from 'react'
import Hero from '../components/Hero/Hero'
import Products from '../components/Products/Products'
import TopProducts from '../components/TopProducts/TopProducts'
const Home = () => {
  return (
    <div>
        <Hero />   
        <Products /> 
        <TopProducts />
    </div>
  )
}

export default Home

================
File: src/pages/Layout.jsx
================
import Navbar from "../components/Navbar/Navbar"
import Footer from "../components/Footer/Footer"
import {Outlet} from "react-router-dom"
import { CartProvider } from "../context/CartContext"

const Layout = () => {

  return (
    <CartProvider>
      <Navbar />
      <Outlet />
      <Footer />
    </CartProvider>
  )
}

export default Layout

================
File: src/pages/Shop.jsx
================
import React from 'react'
import ShopProducts from '../components/ShopProducts/ShopProducts'

const Shop = () => {
  return (
    <div >
      <ShopProducts />
    </div>
  )
}

export default Shop

================
File: src/components/Footer/Footer.jsx
================
import React from 'react'
import { Link } from 'react-router-dom'
import { FaFacebook, FaInstagram, FaHeart, FaMapMarkerAlt, FaClock, FaEnvelope, FaPhone } from 'react-icons/fa'

const Footer = () => {
  const navItems = [
    { name: 'Home', path: '/' },
    { name: 'Shop', path: '/shop' },
    { name: 'About Us', path: '/about' },
    { name: 'Contact Us', path: '/contact' }
  ];

  return (
    <footer className="bg-[#C05263]  text-white py-12 px-4">
      
      <div className="max-w-6xl mx-auto">
        {/* Brand Section */}
        <div className="text-center mb-8">
          <div className="flex items-center justify-center mb-4">
            <span className="text-2xl mr-2">🌸</span>
            <h2 className="text-3xl font-bold">FlowerTouch</h2>
          </div>
          <p className="text-white/80 max-w-md mx-auto">
            Bringing beauty to your world with our carefully curated collection of flowers and gifts
          </p>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8 mb-8">
          {/* Contact Info */}
          <div>
            <h3 className="text-lg font-semibold mb-4">Contact Info</h3>
            <div className="space-y-3 text-sm">
              <div className="flex items-center">
                <FaMapMarkerAlt className="mr-2" />
                <span>FlowerTouch Online Shop</span>
              </div>
              <div className="flex items-center">
                <FaClock className="mr-2" />
                <span>Available 24/7</span>
              </div>
            </div>
          </div>

          {/* Support */}
          <div>
            <h3 className="text-lg font-semibold mb-4">Support</h3>
            <div className="space-y-3 text-sm">
              <div className="flex items-center">
                <FaEnvelope className="mr-2" />
                <a href="mailto:amanizemra0@gmail.com" className="hover:underline">
                  amanizemra0@gmail.com
                </a>
              </div>
              <div className="flex items-center">
                <FaPhone className="mr-2" />
                <a href="tel:+213-0656469659" className="hover:underline">
                  +213 65 64 69 659
                </a>
              </div>
            </div>
          </div>

          {/* Quick Links */}
          <div>
            <h3 className="text-lg font-semibold mb-4">Quick Links</h3>
            <div className="space-y-2">
              {navItems.map((item, index) => (
                <Link
                  key={index}
                  to={item.path}
                  className="block text-sm text-white/80 hover:text-white hover:underline"
                >
                  {item.name}
                </Link>
              ))}
            </div>
          </div>

          {/* Social Media */}
          <div>
            <h3 className="text-lg font-semibold mb-4">Follow Us</h3>
            <div className="flex space-x-4 mb-4">
              <a
                href="https://www.facebook.com/share/16QH9Thksy/?mibextid=wwXIfr"
                target="_blank"
                rel="noopener noreferrer"
                className="text-white hover:text-blue-300"
              >
                <FaFacebook className="text-xl" />
              </a>
              <a
                href="https://www.tiktok.com/@az_flower__touch?_t=ZM-8w61P0unZNl&_r=1"
                target="_blank"
                rel="noopener noreferrer"
                className="text-white hover:text-gray-300"
              >
                <svg
                  className="w-5 h-5"
                  viewBox="0 0 24 24"
                  fill="currentColor"
                >
                  <path d="M12.75 2v12.25a2.25 2.25 0 1 1-2.25-2.25h.25V9.5a5 5 0 1 0 5 5V7.25a5.75 5.75 0 0 0 4.5 1.5V5.75a3.25 3.25 0 0 1-3.25-3.25h-4.25z"/>
                </svg>
              </a>
              <a
                href="https://www.instagram.com/az_flower__touch/"
                target="_blank"
                rel="noopener noreferrer"
                className="text-white hover:text-pink-300"
              >
                <FaInstagram className="text-xl" />
              </a>
            </div>
          </div>
        </div>

        {/* Bottom Section */}
        <div className="pt-6 border-t border-white/30">
          <div className="flex flex-col md:flex-row justify-between items-center space-y-4 md:space-y-0">
            <div className="flex items-center space-x-2 text-sm">
              <span>© {new Date().getFullYear()} FlowerTouch. All rights reserved.</span>
              <span>Made with</span>
              <FaHeart className="text-red-400" />
              <span>for flower lovers.</span>
            </div>
            <div className="flex space-x-6 text-sm">
              <a href="#" className="hover:underline">Privacy Policy</a>
              <a href="#" className="hover:underline">Terms of Service</a>
              <a href="#" className="hover:underline">Shipping Info</a>
              <a href="#" className="hover:underline">Returns</a>
            </div>
          </div>
        </div>
      </div>
    </footer>
  )
}

export default Footer

================
File: src/components/Products/Products.jsx
================
import React, { useEffect, useState } from 'react';
import ProductDetailModal from './ProductDetailModal';
import AddToCartButton from '../Cart/AddToCartButton';
import Img from '../../assets/item/cup.jpg';
import Img2 from '../../assets/item/cup1.jpg';
import Img3 from '../../assets/item/img.jpg';
import Img4 from '../../assets/item/img1.jpg';
import Img5 from '../../assets/item/img2.jpg';

const ProductsData = [
  {
    id: 1,
    img: Img,
    title: 'Mirror with pink bows',
    rating: 4.5,
    price: 2500,
    color: "Pink",
    description: "A charming personalized gift box featuring a handmirror decorated with pink bow tiles and elegant design."
  },
  {
    id: 2,
    img: Img2,
    title: "Mirror with red hearts",
    price: 2500,
    rating: 4.5,
    color: "Red",
    description: "A beautiful handmirror decorated with red heart tiles and personalized with elegant white script."
  },
  {
    id: 3,
    img: Img3,
    title: "Large pink cup",
    price: 5000,
    rating: 4.7,
    color: "Pink",
    description: "A matching glass cup with a wooden lid and straw, customized with personalized design and heart accents."
  },
  {
    id: 4,
    img: Img4,
    title: "Large white cup",
    price: 5000,
    rating: 4.4,
    color: "White",
    description: "Elegant white cup with wooden lid, perfect for personalized gifts and daily use."
  },
  {
    id: 5,
    img: Img5,
    title: "Engagement frame",
    price: 3500,
    rating: 4.5,
    color: "Pink",
    description: "Beautiful engagement frame with personalized design, perfect for special occasions and memorable moments."
  },
];

const Products = () => {
  const [visibleCount, setVisibleCount] = useState(5);
  const [selectedProduct, setSelectedProduct] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);

  useEffect(() => {
    const cards = document.querySelectorAll('.product-card');
    cards.forEach((card, idx) => {
      card.style.opacity = 0;
      card.style.transform = 'translateY(40px)';
      setTimeout(() => {
        card.style.transition = 'opacity 0.6s cubic-bezier(.4,0,.2,1), transform 0.6s cubic-bezier(.4,0,.2,1)';
        card.style.opacity = 1;
        card.style.transform = 'translateY(0)';
      }, 100 * idx);
    });
  }, []);

  const handleViewProduct = (product) => {
    setSelectedProduct(product);
    setIsModalOpen(true);
  };

  const handleCloseModal = () => {
    setIsModalOpen(false);
    setSelectedProduct(null);
  };

  return (
    <>
      <div className='mt-14 mb-12'>
        <div className='container mx-auto px-4'>
          {/*header section*/}    
          <div className='text-center mb-10 max-w-[600px] mx-auto'>
            <p className='text-sm text-pink-950'>Top selling Products for you</p>
            <h1 className='text-3xl font-bold'>Products</h1>
            <p className='text-xs text-pink-900'>
              Here you find our best products to pick from them 
              your best gift for your loved ones or for yourself.
            </p>
          </div>
          
          {/*body section*/}  
          <div>
            <div className='grid w-full grid-cols-1 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 place-items-center gap-6 bg-center'>
              {/*card section*/}
              {ProductsData.slice(0, visibleCount).map((data, idx) => (
                <div
                  className="product-card"
                  key={data.id}
                  style={{
                    opacity: 0,
                    transform: 'translateY(40px)',
                  }}
                  data-idx={idx}
                >
                  <img 
                    src={data.img} 
                    alt={data.title}
                    className='h-[220px] w-[150px] object-cover rounded-md'
                    style={{ display: 'inline-block', marginRight: '10px' }}
                  />
                  <div>
                    <h3 className='font-semibold text-pink-950'>{data.title}</h3>  
                    <p className='text-sm text-gray-500'>{data.price}da</p>
                    <div className='flex items-center gap-1 mb-2'>
                      <span className='text-yellow-500 mr-1'>★</span>
                      <span className='text-gray-500'>{data.rating}</span>
                    </div>
                    
                    {/* Action Buttons */}
                    <div className='flex flex-col gap-2'>
                      <AddToCartButton 
                        product={data} 
                        variant="secondary" 
                        size="small"
                      />
                      <button
                        className="px-2 py-1 rounded bg-pink-100 text-pink-900 text-xs hover:bg-pink-200 focus:outline-none transition-colors"
                        onClick={(e) => {
                          const card = e.currentTarget.closest('.product-card');
                          card.classList.add('clicked');
                          setTimeout(() => card.classList.remove('clicked'), 300);
                          handleViewProduct(data);
                        }}
                      >
                        View Details
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
            
            {visibleCount < ProductsData.length && (
              <div className="flex justify-center mt-8">
                <button
                  className="px-4 py-2 rounded text-white transition hover:opacity-90"
                  style={{ backgroundColor: '#EDAF9E' }}
                  onClick={() => setVisibleCount(prev => prev + 3)}
                >
                  Show More Products
                </button>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Product Detail Modal */}
      <ProductDetailModal
        product={selectedProduct}
        isOpen={isModalOpen}
        onClose={handleCloseModal}
      />
    </>
  );
};

export default Products;

================
File: src/components/ShopProducts/ShopProducts.jsx
================
import { useState, useEffect } from "react"
import AddToCartButton from "../Cart/AddToCartButton"
import ProductDetailModal from "../Products/ProductDetailModal"
import Img from "../../assets/item/cup.jpg"
import Img2 from "../../assets/item/cup1.jpg"
import Img3 from "../../assets/item/img.jpg"
import Img4 from "../../assets/item/img1.jpg"
import Img5 from "../../assets/item/img2.jpg"
import Img6 from "../../assets/item/img3.jpg"
import Img7 from "../../assets/item/img11.jpg"
import Img8 from "../../assets/item/img12.jpg"
import Img9 from "../../assets/item/img13.jpg"
import Img10 from "../../assets/item/img14.jpg"
import Img11 from "../../assets/item/img15.jpg"
import Img12 from "../../assets/item/img16.jpg"
import Img13 from "../../assets/item/img17.jpg"
import Img14 from "../../assets/item/img18.jpg"
import Img15 from "../../assets/item/img19.jpg"
import Img16 from "../../assets/item/img20.jpg"

const ShopProductsData = [
  {
    id: 1,
    img: Img,
    title: "Mirror with pink bows",
    rating: 4.5,
    price: 2500,
    color: "Pink",
    description:
      "A charming personalized gift box featuring a handmirror decorated with pink bow tiles and elegant design.",
  },
  {
    id: 2,
    img: Img2,
    title: "Mirror with red hearts",
    price: 2500,
    rating: 4.5,
    color: "Red",
    description: "A beautiful handmirror decorated with red heart tiles and personalized with elegant white script.",
  },
  {
    id: 3,
    img: Img3,
    title: "Large pink cup",
    price: 5000,
    rating: 4.7,
    color: "Pink",
    description:
      "A matching glass cup with a wooden lid and straw, customized with personalized design and heart accents.",
  },
  {
    id: 4,
    img: Img4,
    title: "Large white cup",
    price: 5000,
    rating: 4.4,
    color: "White",
    description: "Elegant white cup with wooden lid, perfect for personalized gifts and daily use.",
  },
  {
    id: 5,
    img: Img5,
    title: "Engagement frame",
    price: 3500,
    rating: 4.5,
    color: "Pink",
    description:
      "Beautiful engagement frame with personalized design, perfect for special occasions and memorable moments.",
  },
  // Add more products for the shop
  {
    id: 6,
    img: Img,
    title: "Custom Mirror Set",
    price: 4000,
    rating: 4.6,
    color: "Pink",
    description: "Complete mirror set with custom designs and elegant packaging.",
  },
  {
    id: 7,
    img: Img2,
    title: "Heart Collection Mirror",
    price: 2800,
    rating: 4.3,
    color: "Red",
    description: "Beautiful heart-themed mirror perfect for romantic gifts.",
  },
  {
    id: 8,
    img: Img3,
    title: "Designer Cup Large",
    price: 5500,
    rating: 4.8,
    color: "Pink",
    description: "Premium designer cup with custom engravings and wooden accessories.",
  },
  {
    id: 9,
    img: Img4,
    title: "Elegant White Cup",
    price: 5200,
    rating: 4.5,
    color: "White",
    description: "Sophisticated white cup with personalized designs, ideal for gifts.",
  },
  {
    id: 10,
    img: Img5,
    title: "Birthday Frame",
    price: 3600,
    rating: 4.7,
    color: "Pink",
    description: "Customizable engagement frame with elegant design, perfect for special moments.",
  },
  {
    id: 11,
    img: Img6,
    title: "Birthday Ceramic Frame",
    price: 3000,
    rating: 4.2,
    color: "White",
    description: "Set of ceramic frame design, perfect for gifting.",
  },
  {
    id: 12,
    img: Img7,
    title: "Vintage Box",
    price: 4500,
    rating: 4.4,
    color: "Red",
    description: "Vintage-style Box with intricate designs, ideal for collectors.",
  },
  {
    id: 13,
    img: Img8,
    title: "Floral Pattern Frame",
    price: 3200,
    rating: 4.1,
    color: "Red and Yellow",
    description: "Cup with beautiful floral patterns, perfect for nature lovers.",
  },
  {
    id: 14,
    img: Img9,
    title: "Customizable page saver",
    price: 3700,
    rating: 4.6,
    color: "Pink",
    description: "Perfect gift for Book lovers.",
  },
  {
    id: 15,
    img: Img10,
    title: "Artistic Glass Cup",
    price: 4800,
    rating: 4.9,
    color: "Blue",
    description: "Handcrafted glass cup with artistic designs, perfect for special occasions.",
  },
  {
    id: 16,
    img: Img11,
    title: "Elegant Wooden Frame",
    price: 5000,
    rating: 4.8,
    color: "Brown",
    description: "Elegant wooden Frame with personalized engravings, ideal for gifts.",
  },
  {
    id: 17,
    img: Img12,
    title: "Luxury Name Frame",
    price: 1200,
    rating: 4.9,
    color: "White",
    description: "Luxury Name frame with custom designs, perfect for lovers.",
  },
  {
    id: 18,
    img: Img13,
    title: "Birthday Frame",
    price: 3500,
    rating: 4.5,
    color: "Black",
    description: "Customizable Birthday Frame with your birthday and name.",
  },
  {
    id: 19,
    img: Img14,
    title: "Ceramic Graduation Frame",
    price: 4000,
    rating: 4.3,
    color: "Red",
    description: "if uou have a graduated friend or a member of your familly you find the suitble gift.",
  },
  {
    id: 20,
    img: Img15,
    title: "Custom Box",
    price: 3800,
    rating: 4.6,
    color: "Blue",
    description: "perfect cute Box xuth things you choose to customize.",
  },
  {
    id: 21,
    img: Img16,
    title: "Artisan Mirror and Cup box",
    price: 6000,
    rating: 4.7,
    color: "Red",
    description: "Handcrafted artisan cup with unique designs, perfect for collectors.",
  },
]

const ShopProducts = () => {
  const [products, setProducts] = useState(ShopProductsData)
  const [filteredProducts, setFilteredProducts] = useState(ShopProductsData)
  const [selectedProduct, setSelectedProduct] = useState(null)
  const [isModalOpen, setIsModalOpen] = useState(false)
  const [filters, setFilters] = useState({
    priceRange: "all",
    color: "all",
    rating: "all",
  })
  const [sortBy, setSortBy] = useState("name")

  useEffect(() => {
    let filtered = [...products]

    // Apply filters
    if (filters.priceRange !== "all") {
      const [min, max] = filters.priceRange.split("-").map(Number)
      filtered = filtered.filter((product) => product.price >= min && product.price <= max)
    }

    if (filters.color !== "all") {
      filtered = filtered.filter((product) => product.color.toLowerCase() === filters.color.toLowerCase())
    }

    if (filters.rating !== "all") {
      const minRating = Number.parseFloat(filters.rating)
      filtered = filtered.filter((product) => product.rating >= minRating)
    }

    // Apply sorting
    filtered.sort((a, b) => {
      switch (sortBy) {
        case "price-low":
          return a.price - b.price
        case "price-high":
          return b.price - a.price
        case "rating":
          return b.rating - a.rating
        case "name":
        default:
          return a.title.localeCompare(b.title)
      }
    })

    setFilteredProducts(filtered)
  }, [filters, sortBy, products])

  const handleViewProduct = (product) => {
    setSelectedProduct(product)
    setIsModalOpen(true)
  }

  const handleCloseModal = () => {
    setIsModalOpen(false)
    setSelectedProduct(null)
  }

  const handleFilterChange = (filterType, value) => {
    setFilters((prev) => ({
      ...prev,
      [filterType]: value,
    }))
  }

  return (
    <>
      <div className="min-h-screen bg-gray-50 pt-20">
        <div className="container mx-auto px-4 py-8">
          {/* Header */}
          <div className="text-center mb-8">
            <h1 className="text-4xl font-bold" style={{ color: "#C05263" }}>
              Our Shop
            </h1>
            <p className="text-gray-600 max-w-2xl mx-auto">
              Discover our complete collection of handcrafted gifts and personalized items. Find the perfect gift for
              your loved ones or treat yourself to something special.
            </p>
          </div>

          {/* Filters and Sort */}
          <div className="bg-white rounded-lg shadow-md p-6 mb-8">
            <div className="flex flex-wrap gap-4 items-center justify-between">
              {/* Filters */}
              <div className="flex flex-wrap gap-4">
                {/* Price Filter */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Price Range</label>
                  <select
                    value={filters.priceRange}
                    onChange={(e) => handleFilterChange("priceRange", e.target.value)}
                    className="border border-gray-300 rounded-md px-3 py-2 text-sm focus:outline-none"
                    style={{ borderColor: "#C05263", focusBorderColor: "#C05263" }}
                  >
                    <option value="all">All Prices</option>
                    <option value="0-3000">0 - 3,000da</option>
                    <option value="3000-5000">3,000 - 5,000da</option>
                    <option value="5000-10000">5,000da+</option>
                  </select>
                </div>

                {/* Color Filter */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Color</label>
                  <select
                    value={filters.color}
                    onChange={(e) => handleFilterChange("color", e.target.value)}
                    className="border border-gray-300 rounded-md px-3 py-2 text-sm focus:outline-none"
                    style={{ borderColor: "#C05263", focusBorderColor: "#C05263" }}
                  >
                    <option value="all">All Colors</option>
                    <option value="pink">Pink</option>
                    <option value="red">Red</option>
                    <option value="white">White</option>
                    <option value="blue">Blue</option>
                    <option value="purple">Purple</option>
                    <option value="green">Green</option>
                  </select>
                </div>

                {/* Rating Filter */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Rating</label>
                  <select
                    value={filters.rating}
                    onChange={(e) => handleFilterChange("rating", e.target.value)}
                    className="border border-gray-300 rounded-md px-3 py-2 text-sm focus:outline-none"
                    style={{ borderColor: "#C05263", focusBorderColor: "#C05263" }}
                  >
                    <option value="all">All Ratings</option>
                    <option value="4.5">4.5★ & up</option>
                    <option value="4.0">4.0★ & up</option>
                    <option value="3.5">3.5★ & up</option>
                  </select>
                </div>
              </div>

              {/* Sort */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Sort By</label>
                <select
                  value={sortBy}
                  onChange={(e) => setSortBy(e.target.value)}
                  className="border border-gray-300 rounded-md px-3 py-2 text-sm focus:outline-none"
                  style={{ borderColor: "#C05263", focusBorderColor: "#C05263" }}
                >
                  <option value="name">Name A-Z</option>
                  <option value="price-low">Price: Low to High</option>
                  <option value="price-high">Price: High to Low</option>
                  <option value="rating">Highest Rated</option>
                </select>
              </div>
            </div>

            {/* Results Count */}
            <div className="mt-4 text-sm text-gray-600">
              Showing {filteredProducts.length} of {products.length} products
            </div>
          </div>

          {/* Products Grid */}
          <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
            {filteredProducts.map((product) => (
              <div
                key={product.id}
                className="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow"
              >
                <div className="relative">
                  <img
                    src={product.img || "/placeholder.svg"}
                    alt={product.title}
                    className="w-full h-64 object-cover"
                  />
                  <div className="absolute top-2 right-2 bg-white rounded-full px-2 py-1 text-xs font-semibold text-gray-700">
                    {product.color}
                  </div>
                </div>

                <div className="p-4">
                  <h3 className="font-semibold text-gray-800 mb-2">{product.title}</h3>
                  <p className="text-2xl font-bold mb-2" style={{ color: "#C05263" }}>
                    {product.price.toLocaleString()}da
                  </p>

                  <div className="flex items-center mb-3">
                    <span className="text-yellow-500 mr-1">★</span>
                    <span className="text-gray-600 text-sm">{product.rating}</span>
                  </div>

                  <div className="space-y-2">
                    <AddToCartButton
                      product={product}
                      variant="primary"
                      size="medium"
                      className="w-full"
                      style={{
                        backgroundColor: "#C05263",
                        borderColor: "#C05263",
                        color: "white",
                      }}
                    />
                    <button
                      onClick={() => handleViewProduct(product)}
                      className="w-full px-4 py-2 text-sm border rounded hover:bg-opacity-10 transition-colors"
                      style={{
                        borderColor: "#C05263",
                        color: "#C05263",
                        backgroundColor: "transparent",
                      }}
                      onMouseEnter={(e) => {
                        e.target.style.backgroundColor = "#C0526310"
                      }}
                      onMouseLeave={(e) => {
                        e.target.style.backgroundColor = "transparent"
                      }}
                    >
                      View Details
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>

          {/* No Results */}
          {filteredProducts.length === 0 && (
            <div className="text-center py-12">
              <div className="text-gray-500 text-lg mb-4">No products found</div>
              <p className="text-gray-400">Try adjusting your filters to see more results.</p>
            </div>
          )}
        </div>
      </div>

      {/* Product Detail Modal */}
      <ProductDetailModal product={selectedProduct} isOpen={isModalOpen} onClose={handleCloseModal} />
    </>
  )
}

export default ShopProducts

================
File: vite.config.js
================
import { defineConfig } from 'vite'
import tailwindcss from '@tailwindcss/vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [
    react(),
    tailwindcss()
  ],
  server: {
    port: 5174,
    strictPort: true,
    historyApiFallback: true
    
    
  },
 define: {
  'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV),
  'process.env.API_URL': JSON.stringify(process.env.API_URL),
  // Add other specific environment variables you need
},
  optimizeDeps: {
    exclude: ['@swc/core']
  }
})

================
File: package.json
================
{
  "name": "fllowertouch",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview",
    "start": "vite"
  },
  "dependencies": {
    "@fortawesome/fontawesome-svg-core": "^6.7.2",
    "@fortawesome/free-brands-svg-icons": "^6.7.2",
    "@fortawesome/free-solid-svg-icons": "^6.7.2",
    "@fortawesome/react-fontawesome": "^0.2.2",
    "@tailwindcss/vite": "^4.1.7",
    "ao": "^0.1.1",
    "framer-motion": "^12.15.0",
    "lucide-react": "^0.511.0",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-icons": "^5.5.0",
    "react-router": "^7.6.1",
    "react-router-dom": "^7.6.1",
    "react-scripts": "^5.0.1",
    "scripts": "^0.1.0",
    "tailwindcss": "^4.1.7"
  },
  "devDependencies": {
    "@eslint/js": "^9.22.0",
    "@types/react": "^19.1.2",
    "@types/react-dom": "^19.1.3",
    "@vitejs/plugin-react": "^4.3.4",
    "eslint": "^9.22.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.19",
    "globals": "^16.0.0",
    "vite": "^6.3.1"
  }
}

================
File: src/App.jsx
================
import React from 'react'
import { BrowserRouter, Routes, Route } from 'react-router-dom'
import { Navbar } from './components/Navbar/Navbar'
import Shop from './pages/Shop'
import Home from './pages/Home'
import Layout from './pages/Layout'
import AboutUs from './pages/AboutUs'

import Dashboard from './pages/Dashboard'
import Cart from './pages/Cart'

// NoPage component
const NoPage = () => {
  return (
    <div style={{ paddingTop: '80px', padding: '2rem', textAlign: 'center' }}>
      <h1>404 - Page Not Found</h1>
      <p>The page you're looking for doesn't exist.</p>
    </div>
  )
}

export const App = () => {
  return (
    <BrowserRouter>
      <Routes>
        <Route path="/" element={<Layout />}>
          <Route index element={<Home />} />
          <Route path="shop" element={<Shop />} />
          <Route path="about" element={<AboutUs />} />
          
          <Route path="dashboard" element={<Dashboard />} />
          <Route path="cart" element={<Cart />} />
          <Route path="*" element={<NoPage />} />
        </Route>
      </Routes>
    </BrowserRouter>
  )
}

export default App

================
File: src/components/Hero/Hero.jsx
================
import React from 'react'
import { useNavigate } from 'react-router-dom'
import Image4 from '../../assets/hero/flower.jpg'
import LoginModal from '../Navbar/modals/LoginModal';
import SignUpModal from '../Navbar/modals/SignUpModal';

const heroStyle = {
    backgroundColor: '#FFF9F0',
    padding: '20px',
    borderRadius: '10px',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'space-between',
};

const textStyle = {
    fontFamily: "'Dancing Script', cursive",
    fontSize: '24px',
    color: '#333',
    marginLeft: '20px',
};

const shadowStyle = {
    boxShadow: '0px 4px 15px rgba(0, 0, 0, 0.2)',
};

const imageStyle = {
    width: '300px',
    height: 'auto',
    borderRadius: '50%',
    objectFit: 'contain',
    filter: 'drop-shadow(0px 10px 15px rgba(0, 0, 0, 0.3))',
};

const Hero = () => {
    const navigate = useNavigate();

    const handleShopNow = () => {
        navigate('/shop');
    };

    return (
        <>
            <style>
                {`
                    @keyframes floatFlower {
                        0% { transform: translateY(0); }
                        50% { transform: translateY(20px); }
                        100% { transform: translateY(0); }
                    }
                    .flower-float {
                        animation: floatFlower 3s ease-in-out infinite;
                    }
                `}
            </style>
            <div
                style={{
                    ...heroStyle,
                    height: 'auto',
                    position: 'relative',
                    textAlign: 'center',
                    marginTop: '80px',
                }}
            >
                <link
                    href="https://fonts.googleapis.com/css2?family=Dancing+Script:wght@700&family=DM+Serif+Display&display=swap"
                    rel="stylesheet"
                />
                <div style={{ ...textStyle, fontSize: '36px', fontFamily: "'Dancing Script', cursive", margin: '0 auto', color: '#C05263' }}>
                    <h1 className="hero-title" style={{ fontSize: '60px', fontFamily: "'Dancing Script', cursive", color: '#C05263' }}>
                        Discover Your<br />
                        <span className="highlight" style={{ color: '#C05263' }}>Perfect Gift</span>
                    </h1>
                    <p
                        className="hero-subtitle"
                        style={{
                            color: '#85193C',
                            fontFamily: "'DM Serif Display', serif",
                            fontSize: '20px',
                            marginTop: '40px'
                        }}
                    >
                        Every gift needs a flower touch
                    </p>
                    <div>
                        <button
                            className="bg-[#EDAF9E] hover:bg-[#C05263] text-white px-5 py-2 mt-8 text-lg font-serif rounded shadow-lg transition-colors duration-300 focus:outline-none focus:ring-2 focus:ring-[#C05263] hover:shadow-xl cursor-pointer"
                            style={{ fontFamily: "'DM Serif Display', serif" }}
                            onClick={handleShopNow}
                        >
                            Shop Now
                        </button>
                    </div>
                </div>
                <img
                    src={Image4}
                    alt="Flower Bouquet"
                    className="flower-float"
                    style={{
                        ...imageStyle,
                        width: '400px',
                        height: 'auto',
                        objectFit: 'contain',
                        borderRadius: '10px',
                        margin: '20px auto'
                    }}
                />
            </div>
            <LoginModal />
            <SignUpModal />
        </>
    );
}

export default Hero;

================
File: src/components/Navbar/Navbar.jsx
================
import Logo from '../../assets/logo.png';
import React, { useState } from 'react';
import LoginModal from './modals/LoginModal';
import SignUpModal from './modals/SignUpModal';
import { Link } from 'react-router-dom';
import { useCart } from '../../context/CartContext';

export const Navbar = () => {
  const [showLoginModal, setShowLoginModal] = useState(false);
  const [showSignUpModal, setShowSignUpModal] = useState(false);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const { getCartItemsCount } = useCart();
  
  const cartItemsCount = getCartItemsCount();

  // Navigation items with their routes
  const navItems = [
    { name: 'Home', path: '/' },
    { name: 'Shop', path: '/shop' },
    { name: 'About Us', path: '/about' },
    { name: 'Contact Us', path: '/contact' }
  ];

  return (
    <>
      <link
        rel="stylesheet"
        href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css"
      />
      <nav className="bg-[#C05263] shadow-lg fixed top-0 left-0 w-full z-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between h-16">
            {/* Logo and Brand */}
            <div className="flex items-center">
              <Link to="/" className="flex items-center space-x-2">
                <img src={Logo} alt="Logo" className="h-10 w-auto" />
                <span className="text-black font-bold text-xl font-['Dancing_Script']">
                  Flower Touch
                </span>
              </Link>
            </div>

            {/* Desktop Navigation */}
            <div className="hidden md:flex items-center space-x-8">
              {navItems.map((item, index) => (
                <Link
                  key={index}
                  to={item.path}
                  className="text-black hover:text-[#EDAF9E] px-3 py-2 rounded-md text-sm font-medium transition-colors duration-300"
                >
                  {item.name}
                </Link>
              ))}
            </div>

            {/* Desktop Right Side */}
            <div className="hidden md:flex items-center space-x-4">
              {/* Auth Buttons */}
              <button
                onClick={() => setShowSignUpModal(true)}
                className="bg-[#EDAE9E] hover:bg-[#d19181] text-black px-4 py-2 rounded-md text-sm font-medium transition-colors duration-300"
              >
                Sign Up
              </button>
              <button
                onClick={() => setShowLoginModal(true)}
                className="bg-[#EDAE9E] hover:bg-[#d19181] text-black px-4 py-2 rounded-md text-sm font-medium transition-colors duration-300"
              >
                Log in
              </button>

              {/* Icon Buttons */}
              <Link to="/cart" className="relative">
                <button className="text-black hover:text-[#5a1721] p-2 rounded-md transition-colors duration-300">
                  <i className="fas fa-shopping-cart text-lg"></i>
                  {cartItemsCount > 0 && (
                    <span className="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center font-bold">
                      {cartItemsCount > 99 ? '99+' : cartItemsCount}
                    </span>
                  )}
                </button>
              </Link>

              
            </div>

            {/* Mobile menu button */}
            <div className="md:hidden flex items-center">
              <button
                onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
                className="text-black hover:text-[#EDAF9E] p-2 rounded-md transition-colors duration-300"
              >
                <i className={`fas ${isMobileMenuOpen ? 'fa-times' : 'fa-bars'} text-lg`}></i>
              </button>
            </div>
          </div>

          {/* Mobile Navigation Menu */}
          {isMobileMenuOpen && (
            <div className="md:hidden">
              <div className="px-2 pt-2 pb-3 space-y-1 bg-[#C05263] border-t border-[#EDAF9E]">
                {navItems.map((item, index) => (
                  <Link
                    key={index}
                    to={item.path}
                    className="text-black hover:text-[#EDAF9E] block px-3 py-2 rounded-md text-base font-medium transition-colors duration-300"
                    onClick={() => setIsMobileMenuOpen(false)}
                  >
                    {item.name}
                  </Link>
                ))}
                
                {/* Mobile Auth Buttons */}
                <div className="pt-4 space-y-2">
                  <button
                    onClick={() => {
                      setShowSignUpModal(true);
                      setIsMobileMenuOpen(false);
                    }}
                    className="w-full bg-[#EDAE9E] hover:bg-[#d19181] text-black px-4 py-2 rounded-md text-sm font-medium transition-colors duration-300"
                  >
                    Sign Up
                  </button>
                  <button
                    onClick={() => {
                      setShowLoginModal(true);
                      setIsMobileMenuOpen(false);
                    }}
                    className="w-full bg-[#EDAE9E] hover:bg-[#d19181] text-black px-4 py-2 rounded-md text-sm font-medium transition-colors duration-300"
                  >
                    Log in
                  </button>
                </div>

                {/* Mobile Icon Buttons */}
                <div className="flex justify-center space-x-6 pt-4">
                  <Link to="/cart" className="relative" onClick={() => setIsMobileMenuOpen(false)}>
                    <button className="text-black hover:text-[#5a1721] p-2 rounded-md transition-colors duration-300">
                      <i className="fas fa-shopping-cart text-lg"></i>
                      {cartItemsCount > 0 && (
                        <span className="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center font-bold">
                          {cartItemsCount > 99 ? '99+' : cartItemsCount}
                        </span>
                      )}
                    </button>
                  </Link>

                  <button className="text-black hover:text-[#5a1721] p-2 rounded-md transition-colors duration-300">
                    <i className="fas fa-user text-lg"></i>
                  </button>

                  <button className="text-black hover:text-[#5a1721] p-2 rounded-md transition-colors duration-300">
                    <i className="fas fa-search text-lg"></i>
                  </button>
                </div>
              </div>
            </div>
          )}
        </div>
      </nav>
      
      {/* Modals */}
      <LoginModal
        open={showLoginModal}
        onClose={() => setShowLoginModal(false)}
      />
      <SignUpModal
        open={showSignUpModal}
        onClose={() => setShowSignUpModal(false)}
      />
    </>
  );
};

export default Navbar;

================
File: src/main.jsx
================
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.jsx'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <App />
  </StrictMode>,
)




================================================================
End of Codebase
================================================================
